// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using watchify.Shared;

#nullable disable

namespace watchify.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserVideo", b =>
                {
                    b.Property<Guid>("DislikedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DislikedVideosId")
                        .HasColumnType("uuid");

                    b.HasKey("DislikedById", "DislikedVideosId");

                    b.HasIndex("DislikedVideosId");

                    b.ToTable("UserVideo");
                });

            modelBuilder.Entity("UserVideo1", b =>
                {
                    b.Property<Guid>("LikedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LikedVideosId")
                        .HasColumnType("uuid");

                    b.HasKey("LikedById", "LikedVideosId");

                    b.HasIndex("LikedVideosId");

                    b.ToTable("UserVideo1");
                });

            modelBuilder.Entity("watchify.Models.Database.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("watchify.Models.Database.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("UserVideo", b =>
                {
                    b.HasOne("watchify.Models.Database.User", null)
                        .WithMany()
                        .HasForeignKey("DislikedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("watchify.Models.Database.Video", null)
                        .WithMany()
                        .HasForeignKey("DislikedVideosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserVideo1", b =>
                {
                    b.HasOne("watchify.Models.Database.User", null)
                        .WithMany()
                        .HasForeignKey("LikedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("watchify.Models.Database.Video", null)
                        .WithMany()
                        .HasForeignKey("LikedVideosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("watchify.Models.Database.Video", b =>
                {
                    b.HasOne("watchify.Models.Database.User", "Owner")
                        .WithMany("PublishedVideo")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("watchify.Models.Database.User", b =>
                {
                    b.Navigation("PublishedVideo");
                });
#pragma warning restore 612, 618
        }
    }
}
